# This file is licensed under the MIT License.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

"""
SConscript for building the core OpenDoorGL library.a
"""

# python
import os
import platform

# scons
from SCons.Environment import Environment
from SCons.Script.SConscript import Return

# project
from BuildUtils.SconsUtils import ImportVar
from BuildUtils.SconsUtils import SetupBuildEnv

MAIN_ENV = ImportVar('MAIN_ENV')

env = Environment(DEBUG_BUILD=MAIN_ENV['DEBUG_BUILD'])
env['PROJECT_DIR'] = MAIN_ENV['PROJECT_DIR']
env['BUILD_DIR'] = MAIN_ENV['BUILD_DIR']
env.VariantDir('build', 'Source', duplicate=0)

if MAIN_ENV['RUN_ANALYZER']:
    env["CC"] = os.getenv("CC") or env["CC"]
    env["CXX"] = os.getenv("CXX") or env["CXX"]
    env["SHLINK"] = env["CXX"]
    env["ENV"].update(x for x in os.environ.items() if x[0].startswith("CCC_"))
elif MAIN_ENV['RUN_GCOV'] and "linux" in platform.system().lower():
    env.Append(
        CCFLAGS=["-fprofile-arcs", "-ftest-coverage"],
        LIBS=["gcov"],
        LINKFLAGS=["-fprofile-arcs", "-ftest-coverage", "--coverage"]
    )

sourceFiles = [
    "build/odgl_Button.cpp",
    "build/odgl_Cube.cpp",
    "build/odgl_RenderObject.cpp",
    "build/odgl_View.cpp",
    "build/odgl_ShaderManager.cpp",
    "build/odgl_Image.cpp",
    "build/odgl_GeometricObject.cpp",
    "build/odgl_Group.cpp",
    "build/odgl_Model.cpp",
    "build/odgl_ModelLoader.cpp",
    "build/odgl_Include.cpp",
]

headerFiles = [
    "Source/odgl_Button.hpp",
    "Source/odgl_Cube.hpp",
    "Source/odgl_RenderObject.hpp",
    "Source/odgl_View.hpp",
    "Source/odgl_ShaderManager.hpp",
    "Source/odgl_Image.hpp",
    "Source/odgl_GeometricObject.hpp",
    "Source/odgl_Group.hpp",
    "Source/odgl_Model.hpp",
    "Source/odgl_ModelLoader.hpp",
    "Source/odgl_Include.hpp",
    "Source/odgl_Logging.hpp",
]

if env['DEBUG_BUILD']:
    env.Append(CPPDEFINES=["ODGL_DEBUG"])

env.Append(CPPDEFINES=[
    "GLM_FORCE_RADIANS",
    "ODGL_LIBRARAY_BUILD",
])

if "linux" in platform.system().lower():
    debugFlag = ""
    compilerOpt = '-O3'
    if env['DEBUG_BUILD']:
        debugFlag = "-g"
        compilerOpt = '-O0'
    env.Append(
        CPPPATH=[
            MAIN_ENV['PROJECT_DIR'] + "/build/include",
            MAIN_ENV['PROJECT_DIR'] + "/Dependencies/glm",
        ],
        CCFLAGS=[debugFlag, compilerOpt, '-fPIC', "-rdynamic"],
        CXXFLAGS=["-std=c++11"],
        LDFLAGS=[debugFlag, "-rdynamic"],
        LIBPATH=["/usr/lib/gnome-settings-daemon-3.0/"],
        LIBS=["GL", "GLU"]
    )
elif platform == "darwin":
    print("XCode project not implemented yet")
elif "win" in platform.system().lower():

    degugDefine = 'NDEBUG'
    debugFlag = "/O2"
    degug = '/DEBUG:NONE'
    debugRuntime = "/MD"

    if env['DEBUG_BUILD']:
        degugDefine = 'DEBUG'
        debugFlag = "/Od"
        degug = '/DEBUG:FULL'
        debugRuntime = "/MDd"

    env.Append(
        CPPPATH=[
            MAIN_ENV['PROJECT_DIR'] + "/build/include",
            MAIN_ENV['PROJECT_DIR'] + "/Dependencies/glm",
        ],
        CPPDEFINES=['NOMINMAX', "WIN32", degugDefine],
        CCFLAGS=[
            "/analyze-",
            "/GS",
            "/Zc:wchar_t",
            "/W1",
            "/Z7",
            "/Gm-",
            debugFlag,
            "/WX-",
            '/FC',
            "/Zc:forScope",  # Force Conformance in for Loop Scope
            "/GR",           # Enable Run-Time Type Information
            "/Oy-",          # Disable Frame-Pointer Omission
            debugRuntime,
            "/EHsc",
            "/nologo",
        ],
        LINKFLAGS=[degug],
        LIBPATH=[MAIN_ENV['PROJECT_DIR'] + "/build/lib"],
        LIBS=['OpenGL32', 'user32', 'glew32', 'glu32']
    )

MAIN_ENV['PROGRESS'].AddBuild(MAIN_ENV, sourceFiles, env.subst(
    '$SHLIBPREFIX') + "OpenDoorGL" + env.subst('$SHLIBSUFFIX'))
env, prog = SetupBuildEnv(env, "shared", "OpenDoorGL", sourceFiles)

targets = []

if "win" in platform.system().lower():
    targets.extend(prog)
else:
    targets.append(prog)

for file in headerFiles:
    targets.append(env.File(file))

# env = ConfigPlatformIDE(env, sourceFiles, headerFiles, [], prog)
#    def ConfigPlatformIDE(env, sourceFiles, headerFiles, resources, program):
#        if platform == "linux" or platform == "linux2":
#            print("Eclipse C++ project not implemented yet")
#        elif platform == "darwin":
#            print("XCode project not implemented yet")
#        elif "win" in platform.system().lower():
#            variantSourceFiles = []
#            for file in sourceFiles:
#                variantSourceFiles.append(re.sub("^build", "../Source", file))
#            variantHeaderFiles = []
#            for file in headerFiles:
#                variantHeaderFiles.append(
#                   re.sub("^Source", "../Source", file))
#            BUILD_PREFIX =
#               os.path.abspath(env['PROJECT_DIR']).replace('\\', '/')
#            buildSettings = {
#                'LocalDebuggerCommand':BUILD_PREFIX + "/build/MyLifeApp.exe",
#                'LocalDebuggerWorkingDirectory':BUILD_PREFIX + "/build/",
#            }
#            buildVariant = 'Release|x64'
#            cmdargs = ''
#            if env['DEBUG_BUILD']:
#                buildVariant = 'Debug|x64'
#                cmdargs = '--debug_build'
#            env.MSVSProject(
#               target='VisualStudio/MyLifeApp' + env['MSVSPROJECTSUFFIX'],
#                        srcs=variantSourceFiles,
#                            localincs=variantHeaderFiles,
#                            resources=resources,
#                            buildtarget=program,
#                            DebugSettings=buildSettings,
#                            variantbuildVariant,
#                            cmdargs=cmdargs)
#        return env

Return('targets')
