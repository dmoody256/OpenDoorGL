#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

"""
SConscript for building windowing frameworks.
"""

import platform
import os

# scons
from SCons.Environment import Environment
from SCons.Script.Main import AddOption
from SCons.Script.Main import GetOption
from SCons.Script.SConscript import Return

# project
from BuildUtils.SconsUtils import ImportVar
from BuildUtils.SconsUtils import SetupBuildEnv

MAIN_ENV = ImportVar('MAIN_ENV')


AddOption(
    '--glfw3',
    dest='glfw3',
    action='store_true',
    metavar='DIR',
    default=False,
    help='Build App using GLFW3'
)

env = Environment()
env['PROJECT_DIR'] = MAIN_ENV['PROJECT_DIR']
env['BUILD_DIR'] = MAIN_ENV['BUILD_DIR']

libType = "ReleaseBuild"

if "windows" in platform.system().lower():

    degugDefine = 'NDEBUG'
    debugFlag = "/O2"
    degug = '/DEBUG:NONE'
    debugRuntime = "/MD"

    if MAIN_ENV['DEBUG_BUILD']:
        degugDefine = 'DEBUG'
        debugFlag = "/Od"
        degug = '/DEBUG:FULL'
        debugRuntime = "/MDd"
        env.Append(CPPDEFINES=['ODGL_DEBUG'])

    env.Append(
        CPPPATH=[
            MAIN_ENV['PROJECT_DIR'] + "/build/include",
            MAIN_ENV['PROJECT_DIR'] + "/Dependencies/glm",
        ],
        CPPDEFINES=['NOMINMAX', "WIN32", degugDefine],
        CCFLAGS=[
            "/analyze-",
            "/GS",
            "/Zc:wchar_t",
            "/W1",
            "/Z7",
            "/Gm-",
            debugFlag,
            "/WX-",
            '/FC',
            "/Zc:forScope",  # Force Conformance in for Loop Scope
            "/GR",           # Enable Run-Time Type Information
            "/Oy-",          # Disable Frame-Pointer Omission
            debugRuntime,
            "/EHsc",
            "/nologo",
        ],
        LINKFLAGS=[degug],
        LIBPATH=[MAIN_ENV['PROJECT_DIR'] + "/build/lib"],
    )

    LINKFLAGS = [degug],
else:
    debugFlag = "-g"
    env.Append(
        CPPDEFINES=['ODGL_DEBUG'],
        CCFLAGS=['-O0', '-std=c++11'],
    )


if "linux" in platform.system().lower():
    if MAIN_ENV['RUN_ANALYZER']:
        env["CC"] = os.getenv("CC") or env["CC"]
        env["CXX"] = os.getenv("CXX") or env["CXX"]
        env["SHLINK"] = env["CXX"]
        env["ENV"].update(x for x in os.environ.items()
                          if x[0].startswith("CCC_"))
    elif MAIN_ENV['RUN_GCOV']:
        env.Append(
            CCFLAGS=["-fprofile-arcs", "-ftest-coverage"],
            LIBS=["gcov"],
            LINKFLAGS=["-fprofile-arcs", "-ftest-coverage", "--coverage"]
        )

env.Append(CPPPATH=[
    MAIN_ENV['PROJECT_DIR'] + "/AppFrameworks",
    MAIN_ENV['PROJECT_DIR'] + "/Core/Source",
    MAIN_ENV['PROJECT_DIR'] + "/build/include",
    MAIN_ENV['PROJECT_DIR'] + "/Dependencies/glm",
])

env.Append(CPPDEFINES=[
    "ODGL_LIBRARAY_BUILD"
])

env.Append(LIBPATH=[
    "/usr/lib/gnome-settings-daemon-3.0/",
    MAIN_ENV['PROJECT_DIR'] + "/Core/build",
    MAIN_ENV['PROJECT_DIR'] + "/build/lib/",
])

if "window" in platform.system().lower():

    env.Append(
        CPPDEFINES=['WIN32'],
        LIBS=[
            "OpenDoorGL",
            "glew32",
            "glfw3",
            "OpenGL32",
        ])
else:
    env.Append(
        LIBS=[
            "OpenDoorGL",
            "GLEW",
            "glfw3",
            "GL",
            "X11",
            "Xi",
            "Xrandr",
            "Xxf86vm",
            "Xinerama",
            "Xcursor",
            "rt",
            "m",
            "pthread",
            "dl",
        ],
        LINKFLAGS=["-pthread"]
    )


if GetOption('glfw3'):
    env.Append(GLFW3=True)
    env.Append(CPPPATH=[
        "GLFW",
    ])
sourceFiles = [MAIN_ENV['BUILD_DIR'] + "/GLFW/odgl_GLFW3.cpp"]

MAIN_ENV['PROGRESS'].AddBuild(MAIN_ENV, sourceFiles, env.subst(
    '$SHLIBPREFIX') + "OpenDoorGL-GLFW3" + env.subst('$SHLIBSUFFIX'))
env, prog = SetupBuildEnv(env, "shared", "OpenDoorGL-GLFW3", sourceFiles)

targets = [
    MAIN_ENV['PROJECT_DIR'] + "/AppFrameworks/odgl_WindowInterface.hpp",
    MAIN_ENV['PROJECT_DIR'] + "/AppFrameworks/GLFW/odgl_GLFW3.hpp",
]

if "windows" in platform.system().lower():
    targets.extend(prog)
else:
    targets.append(prog)

Return('targets')
